<groupId>cisc.edu</groupId>
   <artifactId>SudokuBLL</artifactId>
   <version>0.0.1-SNAPSHOT</version>
   <build>


 	<properties>
 		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
 		<java.version>14</java.version>
 		<maven.compiler.source>${java.version}</maven.compiler.source>
 		<maven.compiler.target>${java.version}</maven.compiler.target>
 		<junit-platform.version>5.3.1</junit-platform.version>
 	</properties>

 	<build>
 		<plugins>
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-compiler-plugin</artifactId>
 				<version>2.1</version>
 				<configuration>
 					<source>1.14</source>
 					<target>1.14</target>
 				</configuration>
 				<version>3.8.0</version>
 			</plugin>
 		</plugins>
 	</build>

 	<properties>

 		<!-- Generic properties -->
 		<java.version>1.14</java.version>
 		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-surefire-plugin</artifactId>
 				<version>3.0.0-M4</version>
 				<configuration>
 					<argLine>
 						--illegal-access=permit
 					</argLine>
 				</configuration>
 			</plugin>

 		<!-- Spring -->
 		<spring-framework.version>3.2.3.RELEASE</spring-framework.version>

 		<!-- Hibernate / JPA -->
 		<hibernate.version>5.4.19.Final</hibernate.version>
 			<plugin>
 				<groupId>org.apache.maven.plugins</groupId>
 				<artifactId>maven-failsafe-plugin</artifactId>
 				<version>3.0.0-M4</version>
 				<configuration>
 					<argLine>
 						--illegal-access=permit
 					</argLine>
 				</configuration>
 			</plugin>
 		</plugins>
 	</build>

 		<!-- Logging -->
 		<logback.version>1.2.3</logback.version>
 		<slf4j.version>1.7.30</slf4j.version>

 		<!-- Test -->
 		<junit.version>4.11</junit.version>
 	<dependencies>
 		<dependency>
 			<groupId>org.junit.jupiter</groupId>
 			<artifactId>junit-jupiter-api</artifactId>
 			<version>${junit-platform.version}</version>
 			<scope>test</scope>
 		</dependency>
 		<dependency>
 			<groupId>org.junit.jupiter</groupId>
 			<artifactId>junit-jupiter-engine</artifactId>
 			<version>${junit-platform.version}</version>
 			<scope>test</scope>
 		</dependency>

 	</properties>
 		<!-- https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api -->
 		<dependency>
 			<groupId>javax.xml.bind</groupId>
 			<artifactId>jaxb-api</artifactId>
 			<version>2.3.1</version>
 		</dependency>

 	<dependencies>
 		<!-- Spring and Transactions -->
 		<!-- https://mvnrepository.com/artifact/javax.activation/activation -->

 		<!-- Logging with SLF4J & LogBack -->
 		<dependency>
 			<groupId>org.slf4j</groupId>
 			<artifactId>slf4j-api</artifactId>
 			<version>${slf4j.version}</version>
 			<scope>compile</scope>
 			<groupId>javax.activation</groupId>
 			<artifactId>activation</artifactId>
 			<version>1.1</version>
 		</dependency>

 		<!-- https://mvnrepository.com/artifact/org.glassfish.jaxb/jaxb-runtime -->
 		<dependency>
 			<groupId>ch.qos.logback</groupId>
 			<artifactId>logback-classic</artifactId>
 			<version>${logback.version}</version>
 			<scope>runtime</scope>
 			<groupId>org.glassfish.jaxb</groupId>
 			<artifactId>jaxb-runtime</artifactId>
 			<version>2.3.2</version>
 		</dependency>

 		<!-- Hibernate -->
 		<dependency>
 			<groupId>org.hibernate</groupId>
 			<artifactId>hibernate-entitymanager</artifactId>
 			<version>${hibernate.version}</version>
 			<groupId>org.apache.commons</groupId>
 			<artifactId>commons-math3</artifactId>
 			<version>3.6.1</version>
 		</dependency>

 		<!-- Test Artifacts -->
 		<dependency>
 			<groupId>junit</groupId>
 			<artifactId>junit</artifactId>
 			<version>${junit.version}</version>
 			<scope>test</scope>
 			<groupId>org.junit.platform</groupId>
 			<artifactId>junit-platform-commons</artifactId>
 			<version>1.5.2</version>
 		</dependency>
 		<dependency>
 			<groupId>org.apache.poi</groupId>
 			<artifactId>poi</artifactId>
 			<version>3.15</version>
 			<groupId>com.google.guava</groupId>
 			<artifactId>guava</artifactId>
 			<version>19.0</version>
 		</dependency>

 		<dependency>
 			<groupId>org.apache.commons</groupId>
 			<artifactId>commons-math3</artifactId>
 			<version>3.5</version>
 		</dependency>
 		<dependency>
 			<groupId>commons-lang</groupId>
 			<artifactId>commons-lang</artifactId>
 			<version>2.6</version>
 		</dependency>




 	</dependencies>

 </project>         

 public boolean ContainsZero() {
 	 * @return - return 'true' if iValue exists in arr
 	 */
 	public boolean doesElementExist(int[] arr, int iValue) {
 		// TODO: Return 'true' if iValue is found in arr

 		boolean doesElementExist = false;
 		for (int i = 0; i < arr.length; i++) {
 @@ -100,8 +99,6 @@ public boolean doesElementExist(int[] arr, int iValue) {
 	 */
 	public int[] getColumn(int iCol) {

 		// TODO: Return a given column from LatinSquare

 		int[] Col = new int[this.LatinSquare.length];

 		for (int row = 0; row < this.LatinSquare.length; row++) {
 @@ -138,8 +135,6 @@ public boolean doesElementExist(int[] arr, int iValue) {
 	 * @return one dimensional array of the given row
 	 */
 	public int[] getRow(int iRow) {
 		// TODO: Return a given row from LatinSquare

 		int[] Row = new int[this.LatinSquare.length];

 		Row = this.LatinSquare[iRow];
 @@ -159,7 +154,6 @@ public boolean doesElementExist(int[] arr, int iValue) {
 	 * @return return 'true' if every element from source array is in target array
 	 */
 	public boolean hasAllValues(int[] arr1, int[] arr2) {
 		// TODO: Return 'true' if every element from arr2 is in arr1

 		boolean hasAllValues = true;
 		for (int j = 0; j < arr2.length; j++) {
 @@ -193,8 +187,6 @@ public boolean hasAllValues(int[] arr1, int[] arr2) {
 	 */
 	public boolean hasDuplicates(int[] arr) {

 		// TODO: Return 'true' if any element in arr is duplicate

 		boolean hasDuplicates = false;
 		int[] sortedArray = Arrays.copyOf(arr, arr.length);
 		Arrays.sort(sortedArray);
 @@ -220,13 +212,7 @@ public boolean hasDuplicates(int[] arr) {
 	public boolean isLatinSquare() {

 		boolean isLatinSquare = true;
 		// TODO: Return 'true' if...
 		// Each row and column doesn't contain duplicates
 		// If each element in the first row is found in every other row
 		// If each element in the first coumn is found in every other column

 		// Check to see if the any row or column has duplicates. If they do, return
 		// false;
 		for (int i = 0; i < LatinSquare.length; i++) {
 			if (hasDuplicates(getRow(i)))
 				return false;

package pkgHelper;

 import static org.junit.Assert.*;
 import static org.junit.jupiter.api.Assertions.*;

 import java.util.Arrays;

 import org.junit.Test;
 import org.junit.jupiter.api.Test;


 public class LatinSquareTest {
